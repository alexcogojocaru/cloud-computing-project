// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ride.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RideClient is the client API for Ride service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RideClient interface {
	Start(ctx context.Context, in *StartRideRequest, opts ...grpc.CallOption) (Ride_StartClient, error)
}

type rideClient struct {
	cc grpc.ClientConnInterface
}

func NewRideClient(cc grpc.ClientConnInterface) RideClient {
	return &rideClient{cc}
}

func (c *rideClient) Start(ctx context.Context, in *StartRideRequest, opts ...grpc.CallOption) (Ride_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ride_ServiceDesc.Streams[0], "/Ride/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &rideStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ride_StartClient interface {
	Recv() (*StartRideResponse, error)
	grpc.ClientStream
}

type rideStartClient struct {
	grpc.ClientStream
}

func (x *rideStartClient) Recv() (*StartRideResponse, error) {
	m := new(StartRideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RideServer is the server API for Ride service.
// All implementations must embed UnimplementedRideServer
// for forward compatibility
type RideServer interface {
	Start(*StartRideRequest, Ride_StartServer) error
	mustEmbedUnimplementedRideServer()
}

// UnimplementedRideServer must be embedded to have forward compatible implementations.
type UnimplementedRideServer struct {
}

func (UnimplementedRideServer) Start(*StartRideRequest, Ride_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedRideServer) mustEmbedUnimplementedRideServer() {}

// UnsafeRideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServer will
// result in compilation errors.
type UnsafeRideServer interface {
	mustEmbedUnimplementedRideServer()
}

func RegisterRideServer(s grpc.ServiceRegistrar, srv RideServer) {
	s.RegisterService(&Ride_ServiceDesc, srv)
}

func _Ride_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RideServer).Start(m, &rideStartServer{stream})
}

type Ride_StartServer interface {
	Send(*StartRideResponse) error
	grpc.ServerStream
}

type rideStartServer struct {
	grpc.ServerStream
}

func (x *rideStartServer) Send(m *StartRideResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ride_ServiceDesc is the grpc.ServiceDesc for Ride service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ride_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ride",
	HandlerType: (*RideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Ride_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ride.proto",
}
